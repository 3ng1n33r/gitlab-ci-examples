stages:
  - build
  - deploy

variables:
  KANIKO_IMAGE: gcr.io/kaniko-project/executor:debug
  KUBEHELM_IMAGE: c8h11no2/kubectl-helm:0.3
  VAULT_VERSION: 1.15.5

.vars_todofrontend: &vars_todofrontend
  variables:
    APP_COMPONENT: frontend
    APP_COMPONENT_DIR: todofrontend

.vars_todobackend: &vars_todobackend
  variables:
    APP_COMPONENT: backend
    APP_COMPONENT_DIR: todobackend

.job__rules:
  rules:
    - changes:
      - $APP_COMPONENT_DIR/**/*

.job__kaniko_build_image:
  stage: build
  tags:
    - docker
  image:
    name: $KANIKO_IMAGE
    entrypoint: [""]
  script:
  before_script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
  script:
    - >-
      /kaniko/executor
      --custom-platform=linux/amd64
      --cache
      --use-new-run
      --skip-unused-stages
      --context "${CI_PROJECT_DIR}/${APP_COMPONENT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/${APP_COMPONENT_DIR}/Dockerfile"
      --destination "${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/${APP_COMPONENT}/${CI_COMMIT_REF_SLUG}:${CI_COMMIT_SHORT_SHA}"
      --cache-repo "${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/${APP_COMPONENT}/cache"

.job__deploy_k8s:
  stage: deploy
  tags:
    - kubernetes
  image:
    name: $KUBEHELM_IMAGE
  before_script:
    - kubectl config get-contexts
    - kubectl config use-context $K8S_CONTEXT

build todofrontend:
  extends:
    - .job__kaniko_build_image
    - .job__rules
  <<: *vars_todofrontend

build todobackend:
  extends:
    - .job__kaniko_build_image
    - .job__rules
  <<: *vars_todobackend

deploy todofrontend:
  extends:
    - .job__deploy_k8s
    - .job__rules
  <<: *vars_todofrontend
  script:
    - helm upgrade --install $CI_PROJECT_NAME-$APP_COMPONENT charts/$APP_COMPONENT_DIR
        --set image.repository="${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/${APP_COMPONENT}/${CI_COMMIT_REF_SLUG}"
        --set image.tag="${CI_COMMIT_SHORT_SHA}"
        --set ingress.enabled=true
        --set "ingress.hosts[0].host=${APP_URL},ingress.hosts[0].paths[0].path=/,ingress.hosts[0].paths[0].pathType=ImplementationSpecific"
        --namespace $APP_NAMESPACE
        --wait
        --timeout 300s
        --atomic
        --debug

deploy todobackend:
  extends:
    - .job__deploy_k8s
    - .job__rules
  <<: *vars_todobackend
  id_tokens:
    VAULT_ID_TOKEN:
      aud: $VAULT_ADDR
  script:
    - apk add unzip --no-cache
    - curl -L https://hashicorp-releases.yandexcloud.net/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip --output vault.zip
    - unzip vault.zip
    - mv vault /usr/local/bin/vault
    - vault version
    - export VAULT_SKIP_VERIFY=true
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=$VAULT_AUTH_ROLE jwt=$VAULT_ID_TOKEN)"
    - export DB_PASSWORD="$(vault kv get -field=db_password $VAULT_SECRET_PATH)"
    - export DB_USERNAME="$(vault kv get -field=db_user $VAULT_SECRET_PATH)"
    - export DB_NAME="$(vault kv get -field=db_name $VAULT_SECRET_PATH)"
    - helm upgrade --install $CI_PROJECT_NAME-$APP_COMPONENT charts/$APP_COMPONENT_DIR
        --set image.repository="${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/${APP_COMPONENT}/${CI_COMMIT_REF_SLUG}"
        --set image.tag="${CI_COMMIT_SHORT_SHA}"
        --set ingress.enabled=true
        --set "ingress.hosts[0].host=${APP_URL},ingress.hosts[0].paths[0].path=/api,ingress.hosts[0].paths[0].pathType=ImplementationSpecific"
        --set env.DB_PG_NAME="${DB_NAME}"
        --set env.DB_PG_USER="${DB_USERNAME}"
        --set env.DB_PG_PASSWORD="${DB_PASSWORD}"
        --set env.DB_PG_HOST="${DB_HOST}"
        --set env.DB_PG_PORT="${DB_PORT}"
        --namespace $APP_NAMESPACE
        --wait
        --timeout 300s
        --atomic
        --debug
